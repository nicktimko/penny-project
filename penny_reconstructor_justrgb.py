#!/usr/bin/env python2
# -*- encoding: utf-8 -*-
'''..
   penny_reconstructor.py
.. moduleauthor:: Nick Timkovich <ntimkovich@u.northwestern.edu>

Uses the histogram data to make penny-colored-pixels.
'''
from __future__ import division
import sys
import argparse
import csv
import itertools

import numpy as np
#import matplotlib.pyplot as plt

# from http://docs.python.org/2/library/itertools.html#recipes
def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.izip_longest(fillvalue=fillvalue, *args)

# from http://stackoverflow.com/a/312464/194586
def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in xrange(0, len(l), n):
        yield l[i:i+n]

def get_histograms(csv_file):
    '''
    Given a CSV file generated by circle_histograms.py, return a dictionary 
    of histograms keyed by region ID.  Each set of histograms is a dictionary 
    further keyed by color: 'R', 'G', and 'B'.
    '''
    histograms = {}
    with open(csv_file, 'rb') as fi:
        histcsv = csv.reader(fi)
        for rgb_hists in grouper(3, histcsv, None):
            assert rgb_hists[0][0] == rgb_hists[1][0] == rgb_hists[2][0]
            histogram = {color: np.array(raw_hist[2:], np.float) for color, raw_hist in zip('RGB', rgb_hists)}
            histograms[rgb_hists[0][0]] = histogram
                
    return histograms

def histogram_average(h):
    '''
    Take a RGB histogram dictionary and convert it into an RGB triplet
    '''
    rgb = [sum(h[color] * np.arange(256))/sum(h[color]) for color in 'RGB']
    return rgb

def get_colors(csv_file, round_=True):
    colors = []
    for penny_id, penny_hist in sorted(get_histograms(csv_file).iteritems()):
        rgb = histogram_average(penny_hist)
        if round_:
            rgb = [int(round(val)) for val in rgb]
        colors.append(rgb)
    return colors

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    parser = argparse.ArgumentParser(description='Takes a generated '
        'histogram data set and averages the colors.')
    parser.add_argument('image', type=str, help='Image filename used to '
        'generate histograms (not actually read)')

    args = parser.parse_args(argv)

    histogram_file_in = args.image + '_hist.csv'
    rgb_file_out = args.image + '_rgb.csv'

    colors = get_colors(histogram_file_in, round_=False)
    
    with open(rgb_file_out, 'wb') as f:
        rgbcsv = csv.writer(f)
        for i, color in enumerate(colors):
            rgbcsv.writerow([i + 1] + color)	

if __name__ == '__main__':
    sys.exit(main())
